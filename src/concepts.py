from models import Groq_LLM,SimilarityModel
import numpy as np
from sentence_transformers import util
from datatypes import Concepts,Config

class ConceptPooler:
    
    def __init__(self,llm_config:Config):
        self.llm_config = llm_config
        self.similarity_threshold = llm_config.config["similarity_threshold"]
        self.similarity_model = SimilarityModel(llm_config=llm_config)
        
    def _create_similarity_matrix(self,concepts:list)->np.ndarray:
        all_embeddings = self.similarity_model.model.encode(concepts,convert_to_tensor=True)
        similarity_matrix = util.pytorch_cos_sim(all_embeddings, all_embeddings).cpu().numpy()
        np.fill_diagonal(similarity_matrix, 0)
        return similarity_matrix
    
    def get_unique_concepts(self,concepts_list:list)->list[str]:
        all_concepts = [concept for sublist in concepts_list for concept in sublist]
        similarity_matrix = self._create_similarity_matrix(all_concepts)
        to_remove = set()
        num_concepts = len(all_concepts)
        for i in range(num_concepts):
            if i in to_remove:
                continue
            for j in range(i + 1, num_concepts):
                if similarity_matrix[i][j] >= self.similarity_threshold:
                    to_remove.add(j)
        unique_concepts = [s for i, s in enumerate(all_concepts) if i not in to_remove]
        return unique_concepts
    
class ConceptExtractor:

    def __init__(self,llm_config:dict):
        self.llm_config = llm_config
        self.extracted_concepts = []

    def _get_extraction_prompt(self,text_sequence):
        ONE_SHOT_EXTRACTOR_PROMPT = f"""
    Extract high-level concepts like the following example:
    paragraph: “Basketball, a beloved sport worldwide, has come a long way since its humble
    beginnings in the late 19th century. The game was originally created by Dr. James Naismith in
    1891 as a way to keep his students active during the winter months. Back then, players used a
    soccer ball and peach baskets as makeshift goals. Fast forward to the modern era, and basketball
    has transformed into a high-paced, adrenaline-pumping spectacle. With legendary athletes like
    Michael Jordan, LeBron James, and Kobe Bryant gracing the courts, and the introduction of the
    slam dunk, three-point shot, and shot clock, the sport has evolved into an art form that captivates
    fans around the globe. The NBA, with its star-studded roster and global reach, is a testament
    to basketball’s enduring popularity and its remarkable journey from humble beginnings to a
    multimillion-dollar industry.”
    concepts: Basketball’s origins,Evolution of basketball,Modern era of basketball,Legendary
    basketball athletes,Basketball’s global popularity,Basketball as an art form,Basketball as a
    multimillion-dollar industry
    
    paragraph: {text_sequence} 
    concepts: """
        return ONE_SHOT_EXTRACTOR_PROMPT
    
    def _parse_concepts(self,generated_concepts_str:str)->list:
        return generated_concepts_str.split(",")

    def _generate(self,prompt:str)->list[str]:
        groq_llm = Groq_LLM(self.llm_config)
        generated_concepts:Concepts = groq_llm.s_generate(prompt=prompt,base_model=Concepts)
        parsed_concepts:list[str] = generated_concepts.concepts
        return parsed_concepts
    
    def extract_concepts(self,text_sequence:list[str])->list|list[str]:
        """
            This function takes a list of output sequences generated by an LLM and retrieved contexts and returns a list of concepts for each output sequence or  a tuple of them if the 'return_combined' flag is on.
            
            Args:
                text_sequence: The list of text_sequence from which the concepts are to be extracted

            Returns:
                list[str] or list: The list of extracted concepts or the list of tuple of output_sequences and extracted concepts.
        """  
        all_concepts = []
        for text in text_sequence:
            extraction_prompt = self._get_extraction_prompt(text)
            generated_concepts_list:str = self._generate(extraction_prompt)
            all_concepts.append(generated_concepts_list)
        return all_concepts